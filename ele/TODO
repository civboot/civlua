
-- string find backwards
--
-- this searches for the pattern and returns the LAST one found.
-- This is HORRIBLY non-performant, only use for small amounts of data
M.findBack = Fn{'string', 'string', 'number', 'boolean'}
      :inpMaybe{   false,    false,     true,     true }
      :out     {'number', 'number'}
      :outMaybe{true,     true}
:apply(function(s, pat, end_, noCheck)
  local s, fs, fe = s:sub(1, end_), nil, 0
  assert(noCheck or #s < 256)
  while true do
    local _fs, _fe = s:find(pat, fe + 1)
    if not _fs then break end
    fs, fe = _fs, _fe
  end
  if fe == 0 then fe = nil end
  return fs, fe
end)
assertEq({4, 6}, {findBack('aa bb3', '%w+')})
assertEq({4, 4}, {findBack('aa bb3', '%w+', 4)})
assertEq({nil, nil}, {findBack('aa bba', '%d+')})

find the pattern (backwards) starting at l/c
Gap.findBack = function(g, pat, l, c)
  while true do
    local s = g:get(l)
    if not s then return nil end
    c = ds.findBack(s, pat, c)
    if c then return l, c end
    l, c = l - 1, nil
  end
end
assertEq({1, 3}, {g:findBack('34', 2, 3)})

