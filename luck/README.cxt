[{h1}Luck: Lua Configuration Language]

Luck is a [@Lua] based configuration language.

It's syntax and execution is literally Lua, but with it's [$_ENV] (it's
accessible global variables) stripped to only a few safe and deterministic
modules and functions.

The values it exports are it's globals. For instance:

[##
name    = "Rett Berg"
date    = "2023-12-20"
version = {1, 2, 3},
project = {
  name = "Civboot",
  url = "civboot.org",
}
]##

Is equivalent to the JSON
[##
{
  "name": "Rett Berg",
  "date": "2023-12-20",
  "version": [1, 2, 3],
  "project": {
    "name": "Civboot",
    "url": "civboot.org",
  }
}
]##

Unlike JSON, Luck supports everything Lua supports, including:[+
* precomputing local values
* referencing local and global values
* defining and calling functions
* [<#Dependencies>dependencies]
]

[{:h2}API]

The available functions are (TODO: give linked table instead):

[##
luck=luck,
sfmt=string.format, push=table.insert,

string=string, table=table,   utf8=utf8,
type=type,     select=select,
pairs=pairs,   ipairs=ipairs, next=next,
error=error,   assert=assert,

tonumber=tonumber,
abs=math.abs, ceil=math.ceil, floor=math.floor,
max=math.max, min=math.min,
maxinteger=math.maxinteger,
]##

[{:h2]Dependencies]

The first symbol of a luck file CAN be a call to the [$luck] function which
specifies the package name and any dependencies.

The build system (which can simply be a Lua script which calls [$luck.load])
must give the paths to relevant luck files. It will then load only the leading
[$luck] call to build the dependency graph before loading the entire tree.

When executed, each luck file will receive a clone of its dependency's values
assigned to the keys it specifies.

[##
luck {
  'my.pkg.name',           -- package name
  dep1 = 'some.pkg.name',  -- a dependency
  dep2 = 'other.pkg.name', -- another dependnecy
}

-- export value
value1 = dep1.someFunction(dep1.someValue, dep2.otherValue * 3)
]##

[{!:href=http://lua.org}Lua]
