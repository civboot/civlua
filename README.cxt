[!you can see a rendered version of this document in [/API.html]!]
civlua: a minimalist, self-documenting and public domain tech stack.

["You are reading the developer documentation. Tutorial-style documentation is
  planned in the future for both absolute beginners and knowledge experts,
  but has not yet been started.]

[{:h2}Installation]
Install Lua with [$apt-get install lua], [$brew lua] or however you normally
install software, or follow directions at [<https://lua.org/start.html>]. You
also need standard build tools (i.e. [$make], [$gcc]).

Then run the following (or equivalent):

[{## sh}
# build lua
cd path/to/civlua/
make build LUA_VERSION=lua5.3  # or your lua version

# add these lines to .bashrc
cat >> ~/.bashrc << EOF
LUA_PATH="$PWD/lib/pkg/?.lua"
LUA_PKGS="$PWD/"

alias civ="$PWD/civ.lua"
EOF
]##

You can now run any civlua script with, i.e. [$civ help ff].

["See [@pkg-install] for more details regarding [$PKG.lua] dependencies.]

[{:h3}Testing]
After installation, it's a good idea to run the tests to make sure civlua is
appropriate for your platform. You can use the command below, which also
enables logging:
[{## sh}
LOGLEVEL=INFO make test LUA_VERSION=lua5.3
]##

[{:h2 name=why}Why?]
Civlua is an entire "Developer Tech Stack" from scratch, written in 100% Lua (or
small C-extensions). First of all, what is a "Developer Tech Stack"?

Besides the compiler and build system, a software developer only truly depends
on a few terminal-based tools for development. These are their text editor,
shell (and/or repl), version control, a means to query documentation, and a few
other situational tools (i.e. find/replace text). These encompase the
"Developer Tech Stack". civlua aims to provide this tech stack in a "small"
amount of code that is well documented and easy for a single developer to
understand and modify within a few months.

Software is complex. Some of the complexity is to serve goals like performance
and scaleability; which can be good for large-scale collaboration. However,
the core tools of a developer such as their editor, shell, utilities and
documentation should should be completely [,knowable] and [,hackable].
How can our tech stack be knowable when all the core tools are so bloated?
The [$Python/] directory in  [<https://github.com/python/cpython>CPython] is
124k lines (and [$Lib] is 790k). [<code.commonmark.org>CommonMark], which just
renders markdown files, is 20 thousand lines alone!

The [<https://lua.org>Lua] language is only 20k lines of code and this library
(~15k lines) will soonish implement an entire tech stack that a small team of
developers or students could use to cooperate and hack. Technology is much more
joyful when it is at this size and complexity. That is the goal of this
project, and that is the goal of [<https://civboot.org>], which this project is
a part of.

[{:h2}Packages]
The following are packaged directly in this repository as subdirectories.

[{h3}Commands]
These can all be called directly in bash with [$./civ.lua <cmd> ...]. You can view
their command documentation with [$./civ.lua help <cmd>]. [+
* [{*href=#Package_pvc}pvc]: patch version control -- like git but in ~1k LoC.

* [{*href=#Package_ele}Ele]: Extendable Lua Editor and Lua-first shell --
  still in development.

* [{*href=#Package_doc}doc]: get help on any package or lua object as cxt or rendered
  with color on the terminal.

* [{*href=#Package_cxt}cxt]: this document and all code documentation is written in
  [*cxt], a powerful ultra-simple markup language which is designed to be as
  easy as possible to parse (for computers [,and] humans) while still using as
  few characters as possible to express format for common cases. Commands: [+
  * [$cxt.html]: render a cxt document in html.
  * [$cxt.term]: render a cxt document on the terminal
  ]

* [{*href=#Package_ff}ff]: find and fix utility, like a superchanged find+grep from unix
  land.
]

[{h3}Core Libraries]
The following are the "core libraries" and represent the "batteries included"
of Civlua. They maintain minimalism but enable ergonomic programming, powerful
scripting, asynchronous file access and other goodies. [+
* [{*href=#Package_pkg}pkg]: enables self-documenting code and cleaner dependency
  management. Defines the PKG protocol to enable self-documenting modules
  as well as fix Lua's biggest wart (implicit globals).

* [{*href=#Package_shim}shim]: write scripts for Lua, execute from shell. Think
  python's [$argparse] but cleaner and allows for Lua OR shell execution.

* [{*href=#Package_metaty}metaty]: enable typosafe, self documenting records (aka
  structs) which utilize Lua metatables.

* [{*href=#Package_fmt}fmt]: format strings and lua nested types with an (optional)
  style interface.

* [{*href=#Package_ds}ds]: Data Structures and algnorithms. This module is
  packed with tons of tiny functions, types and interfaces which enable ergonomic
  scripting as well as creating applications such as editors and version
  control systems in pure Lua.

* [{*href=#Package_lines}lines]: treat files like tables of lines and apply
  algorithms for that interface. The [$lines.File] and [$lines.EdFile] are
  especially worth checking out.

* [{*href=#Package_civix}civix]: unix system interface: ergonomic unix [$sh],
  time and file modification are here.

* [{*href=#Package_civtest}civtest]: no batteries would be complete without a testing
  library.  civtest is minimal but gets the job done.

* [{*href=#Package_lap}lap]: Lua Asynchronous Protocol, for advanced users who want
  concurrency in pure-lua.

* [{*href=#Package_fd}fd]: file-descriptor library for async files and other file
  operations.

* [{*href=#Package_pegl}pegl]: general-purpose PEG-like parser library, used
  for [<#Package_cxt>cxt] and will help provide syntax-highlighting in ele.

* [{*href=#Package_lson}lson]: implements de/serialization of arbitrary
  concrete data (including tables) to/from JSON and an extension called LSON.
]

[{h3}Styling]
The following define an interface to enable color output across any device,
including: normal terminal, Ele (the civlua text editor) and html syntax
highlighting: [+
* [{*href=#Package_asciicolor}asciicolor]: specify color and styles using
  ascii characters, i.e. [$"BW"] is bold+underlined black text on white
  background.

* [{*href=#Package_vt100}vt100]: defines common VT100 (aka standard unix)
  terminal input and output.
]

[{h3}Data Management]
Civlua aims to implement a simple version control (similar to git) while also
enabling CivbootOS's configuration and data storage needs (aka network config,
simple databases, maybe a spreadsheet program, etc): [+
* [{*href=#Package_luck}luck]: lua-like configuration language with imports.
  Think [<https://bazel.build/>bazel] but only for data -- though you could
  make a build system on top!

* [{*href=#Package_tv}tv]: tabbed-values. Similar in spirit to TSV
  (tab-separated-values) but with an actual spec and the ability to define a
  header with types.

* [{*href=#Package_vcds}vcds]: version-control data structures. Diffs, cherry
  picks, etc.
]

[{:h3}Luarocks]
The [{*href=#Package_pkgrock}pkgrock] script enables converting [$PKG.lua]
files to [<https://luarocks.org/>] specs, as well as running the magical git
incantations necessary for luarocks to find the version.

[{:h2 name=references}Shoutouts and Inspiration] [+
* [<https://duskos.org>] which inspired Civboot and which this software
  eventually hopes to use as (one of) its target operating systems
* [<https://lua.org>] for creating an awesome and minimal programming langauge
* [<https://civboot.org>]
]

[{:h2}LICENSE]
All software, tests, documentation, notes and anything else in this repository
is released into the public domain ([/UNLICENSE]) unless otherwise noted in
the given source file.

If you find any of this software helpful or copy large parts of it, please give
us a a shoutout in your own projects and let us know by opening an
[<https://github.com/civboot/civlua/issues>issue]. Please note that this is not
required but is highly appreciated, thanks!

