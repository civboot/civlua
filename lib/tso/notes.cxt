
Thought process for creating TSO.

I basically want something like CSV but with the expressive
power of JSON.

I also want it to be more concise: the PRIMARY purpose is
machine readable, but I want to consider human readability too.


The basic goal is to convert this:
[
  users = [
    {"id": 1, "name": "John",   "birthday": "1999-10-31"},
    {"id", 2, "name": "Maxine", "birthday": "1998-12-25"}
  ],
  accounts = [
    {"userId": 1, "ammount": 1000, "kind": "savings"},
    {"userId": 1, "ammount": 100,  "kind": "checking"},
    {"userId": 2, "ammount": 120,  "kind": "checking", "notes": [
      "2020-01-03: wants investment advice", "2019-11-05: yelled at clerk"
    ],
  ],
]

Into something like this

.users	{
 #"name	"birthday
 John	1999-10-31
 Maxine	1998-12-25
}

.accounts	{
 #"userId	"ammount	"kind
 1	1000	"savings
 1	100	"checking
 2	120	"checking	.notes	{
  "2020-01-03: wants investment advice	"2019-11-05: yelled at clerk	}
}

On actually attempting to implement this it's a bit more tricky
than I first realized though. The main difficulty is on the
"implicit table"... how does the serializer and deserializer handle
that case?

Thought1: newlines are an [/implicit close] for a previous newline
only (all '{' must have an explicit close)

How to implement? A stack!

* When "users" is hit, the serialization is started. Since nothing
  is on the stack [$bracket=false] is pushed to the stack and the
  table is written with only a newline.
* the value of ".accounts" is a table. When this value is hit,
  there is already an [$bracket=false] on the stack, therefore a
  '{' is pushed and implicit=false is pushed to the stack.
  * Note: this would push a bracket anway -- a bracket must ALWAYS
    be pushed for the value of a key

Another case, which shows that we also need to track whether
the last column was a table opener.

{1, 2, {
  3, {
    -- these are basically inner rows
    {{4, 5}, note="first row"},
    {6, 7, note="second row"},
    'nested', 8, 9,
    {10, 11}
  },
'end'}

Becomes the following, with comments

The very first '{' has bracketStr=false since the stack is empty.

The first nest after '2' is part of a row so '{' is forced.
This set's lastColBracket=true.

However, it's first value is a '3' so it is written directly on the line
and lastColBracket=false.  It's next value is a table. Since lastColBracket=false
another '{' is written

1	2	{3	{
  lastColBracket=true
  bracketStk: {false, true, true}

Now things get a bit interesting. The next item is a table. Since
bracketStk(top) and lastColBracket=true a newline is written. This updates the
state:

  lastColBracket=false
  bracketStk: {false, true, true, false]

This will be the state at the start of EVERY item in this table.

The table's first row is written. When the nested '5' table is hit it has
both lastColBracket=false and a false bracketStk(top) so it writes a '{'

  {4	 5	}.note	"first row

The next element starts with the same state as the first,
so again a newline is written

  6	 7	.note	"second row

Now we need to write 'nested' value. However, how do we make sure to make
it clear this is not a "third row" and instead should apply to the table
itself?

Let's finish the other rows and look at some options inline.
I think it's pretty clear we need some way to distinguish between
these two cases

1	2	{3	{
  {4	 5	}.note	"first row
  6	 7	.note	"second row
  "nested	8	9 -- BAD: looks like a new table
  +"nested	8	9 -- GOOD: clear that this is a "continuation"
  10	11
 }
}	"end

But how to handle the above? Another variable? Another stack??
How do I pass this information "down" to the children?

First of all, ALL values need to be somehow "stack aware" -- probably
the "nextCol" needs to accept a boolean for whether the next value
is a table and needs to handle all these cases.

When the "nested" string (as well as 8, 9) are deserialized, they
have the same state as any column does

  lastColBracket: false
  bracketStk: {false, true, true, false]

It feels like I need to have yet _ANOTHER_ piece of information.
When doing this by hand, it's fairly intuitive: you use a '+'
is the value is part of a table AND it's the first item.

OMG, that might be the answer actually. I can throw away both lastColBracket
and bracketStk if I just know:

* will this item want to nest
* is this the first item in the table?
* is this the first item in the line? (easy to track)
* does the table this is a part of have a bracket opening?

###

Next phase... what about

something = {
  {1, 2, 3},
  {4, 5, 6},
  7,
  8,
  9,
  foo = 'bar',
}


I would want to do this:

.something {
  1 2 3
  4 5 6
  ?? 7 8 9
}

If I use '+' for ?? then there is confusion -- is it adding to the first table
or the "base" table?

I think another symbol: '*', aka "table row"

> Obviously non-table values are not permitted when a header is used.

So it would be

.something {
  1 2 3
  4 5 6
  *7 8 9 .foo "bar
}

