pkg: local and recursive require

This directory exports one lua module ([$pkglib.lua]) and enables [$PKG.lua]
files to be used for looking up [$require'someModule'] statements in lua.

Why: [+
* local development: set [$LUA_PKGS=./] and it will only search for pkgs in your
  current directory. You can define a [$PKG.lua] with a [$pkgs] variable to
  recursively search for other locally defined packages (see [/PKG.lua])
* concise [$LUA_PKGS] environment variables: you no longer have to maintain a huge
  and impossible to read [$LUA_PATH] variable with a bunch of obtuse [$?].
* performance: the [$PKG.lua] locations are cached for future lookups whereas
  [$LUA_PATH] must perform a complete search every time.
* explicitness: (optional) adds global [$G] to allow explicit globals and makes
  using implicit globals an error.
]

[" civlua uses this library to maintain 10+ projects at
   [<http://github.com/civboot/civlua>civlua]. PKG files can be converted to
   rockspec using [$./civ.lua pkgrock --help]]


[{h3 name=pkg-install}Installation]
In your [$~/.bashrc] or equiavalent add:
```
LUA_PATH="path/to/civlua/lib/pkg/?.lua;..."
LUA_PKGS="path/to/civlua;path/to/other/pkg;..."
```

You can get an interactive lua prompt with
[$lua -e \"require'pkglib'.install()\"; G.MAIN = {}" -i]
(Note: however, you must use [$G.foo] for setting globals, so you may want to
do it slightly different for the shell)

Alternatively, you can put the following at the top of your lua scripts and they
will be executed with pkg require installed (this is what [/civ.lua] does): [##
#!/usr/bin/env -S lua -e "require'pkglib'()"
]##

[{h3 name=define-pkg}Define PKG]

Your libraries (packages) should have a `PKG.lua` in their root:
[{## lang=lua}
name    = 'myLib'
version = '0.1-0'
url     = 'git+http://github.com/my/repo'
srcs    = {
    'myLib.lua',      -- require'myLib'
    'myLib/sub1.lua', -- require'myLib.sub1'

    -- require'myLib.sub2'
    ['myLib.sub2'] = 'lib/myLib/submodule.lua'}, 
}
pkgs = {
  'path/to/subpkg/',
}

-- (optional) provide initial rockspec for external tooling
-- https://github.com/luarocks/luarocks/wiki/Rockspec-format
rockspec = {}
]##


[{h3 name=pkg-protocol}PKG Protocol]
pkg exports a few OPTIONAL global variables. Other libraries which override
[$require] or want to create self-documenting code are encouraged to use these
in the following way in order to support both normal and pkglib environments: [+
* [$local G = G or _G] to define/get undefined globals in a typosafe way [+
  * pkglib sets a metatable to [$_G] so that access to [*undefined] globals
    throw an error. Note that **defined** globals behave normally with no
    performance penalty.
  * Usage: `G.myGlobal = G.myGlobal or true` will define the global `myGlobal`
    as `true` if it is not already defined.
  ]
* [$local M = G.mod and mod'myModName' or {}] to initialize your module. This
  enables self-documenting modules (global [$mod]).

* [$G.MAIN = G.MAIN or M] should be run before you [$require] other libraries,
  but only if your module is runnable from the command line. [+
  * Why: later (at the bottom of your script) you can do
    [$if M == MAIN then M.main(arg); os.exit(0) end] to make your library run as
    a script when called directly.
  * This is never required for libraries. It is REQUIRED if your script can be
    run from the command line and installs pkg-protocol libraries in it's
    dependency tree, as many libraries behave differently when called directly
    (i.e. they will run a command and exit).
  ]
]

[{h3 name=pkg-script}Example Script] [{## lang=lua}
#!/usr/bin/env -S lua -e "require'pkglib'()"
local G = G or _G -- typosafe globals

--- this module is self documenting from pkglib.
--- Get documentation with [$doc 'myModName.item']
local M = G.mod and mod'myModName' or {} -- self-documenting module
G.MAIN = G.MAIN or M                     -- (cmdline script only)

--- docs for myFn
M.myFn = function() ... end --> returnType

--- docs for main function when run directly
M.main = function(args) --> int
  ... use as a script
end

if M == MAIN then os.exit(M.main(arg)) end
return M -- return as a library
]##

See also: [<#Package_doc>], [<#Package_shim>]

[{h3}How do PKG.lua files work?]
PKG.lua files are executed in a sandbox. Their environment has access to only
the following globals: [+
* [$pairs ipairs error assert]
* from string: [$format]
* from table: [$insert sort concat]
]

It also has the globals [$UNAME, LIB_EXT] which can be values such as
[$"Linux",".so"] or [$"Windows",".dll"] and are for loading C libraries.

Any globals that the PKG.lua script defines are used as the configuration.
