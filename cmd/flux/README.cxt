[{h1}flux: simple version control]

["WARNING: flux is in the design phase. This directory is just notes]

Flux aims to be the simplest possible usable and helpful version control
system.


[{h2}Basic Architecture]
Fundamentally a flux branch is just a series of patches (i.e. as generated by
the unix [$diff] command) each named an incremented integer. It interacts with
the [$flux] commandline software through the following architecure: [+
* flux data is stored in a local [$.flux/] directory.

* within this directory are branch directories, for example [$root/] and [$rett/]
  denoting the remote branch and a local branch.

* each branch directory contains the following: [+
  * a [$branch] text file (if this is not the root) which contains [$FROM=], [$ID=], and
    [$URL=] lines with information about where and at what patch id it branched from.

  * patch files of incrementing id (i.e. [$1], [$2], etc), typically starting
    at [$ID + 1]. Each file contains a [@unidiff] of the files changed.

  * [$id.snap/] directories, each containing the full contents of the
    repository at that id.  Any snapshot can be created by copying a
    [$snap/] directory and applying patches in sequential order.

  * [$tar] file (no extension) which is a [@tarball] of patch files in incrementing
    order of ids less than non-tar files. Flux will automatically move patches
    to this tarball, mainly to avoid file exhaustion in the OS.

  * additional metadata files to help with the fast execution of the software: [+
    * [$tip] contains just the current highest commit.
    ]
  ]
]

[{h3}COMMIT File]
One problem normally associated with using patches for VCS is that there is no way to include
metadata in the commit. Flux solves this problem by requiring a COMMIT file
to be modifed for every commit. In order to commit, the user must edit the
COMMIT file by prepending data in the following form:
[##
One line description: the next line MUST be blank.

Freeform description, commonly in CXT format. Can be any number
of lines, but must be followed by a blank line.

ATTRIBUTE=arbitrary one-line attributes in a block at end.
]##

["The tool requires that all changes to COMMIT are prepended so that conflicts
  on rebasing are impossible, since rebases are always applied to the end of
  the trunk.
]

Flux then automatically adds the following lines to the patch:
[##
AUTHOR=<username>
SIGNATURE=<cryptographic signature of patch>
HASH=<sha256 hash of repo, excluding COMMIT>
]##

["The HASH always dictates the end of a COMMIT record.]

When viewing commits on the command line, flux will format these messages for
the user.

[{h3}.fluxinclude]
A file containing a newlineline separated list of lua [$+include] and
[$-exclude] Lua patterns to display files the user may have forgotten to
include.

[{h2}Common Operations]
Below are common operations and how they are handled by the software.

[{h3}Pull]
The user runs [$flux pull root]. For this example the latest commit number is "442":[+
* flux will request a tar file from URL containing the current id to the latest id (442)
* in a temporary directory, flux will apply each patch sequentially from the
  current [$id.snap] directory.
* flux will move the temporary directory to [$.flux/root/442.snap/]
]

[{h3}Checkout]
The user runs [$flux checkout branch <id>]

If the suitable [$.flux/branch/id.snap/] directory does not exist then patches
are applied (either forward or backward) to create that directory.

The current directory will then be cleared and replaced with files copied from
the snapshot.

[{h3}Commit]
This is the simplest: a [$diff] is taken against the latest [$snap/] and stored
as the next patch id. Then the latest [$snap/] directory is updated.

[{h3}Branch]
The user runs [$flux branch name [trunk id]]:[+
* Create a new directory with the branch name under [$.flux/]
* Copy the full contents of the trunk at the patch id into [$.flux/branch/id.snap/]
* Create the [$branch] file with the relevant metadata (URL can be a local
  directory).
* That's it. The branch is created. Commits will appear in this directory.
]

[{h3}Merge aka rebase]
The only allowed merge is a rebase. It effectively involves cherry picking
changes from the branch onto the trunk, requiring the user to resolve any
conflicts.

That's it -- and yes cherry picks are slightly complicated, but no this isn't
that hard.

[{h2}Other Considerations]
[+
* On each commit, flux garbage collects [$id.snap/] directories and moves patch
  files into [$tar].
* A flux repo can be hosted readonly by simply hosting an FTP server or
  similar. In fact, this is the preferred method of hosting a flux repo.[+
  * The write path should be behind an RPC or similar to verify the signature/etc.
  * Altenatively, it is (obviously?) trivial to merge patches sent by email.
  ]
]

[{! :href=https://en.wikipedia.org/wiki/Diff#Unified_format}unidiff]
[{! :href=https://en.wikipedia.org/wiki/Tar_(computing)}tarball]
