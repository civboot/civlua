
[{h3}COMMIT File]
One problem normally associated with using patches for VCS is that there is no way to include
metadata in the commit. Flux solves this problem by requiring a COMMIT file
to be modifed for every commit. In order to commit, the user must edit the
COMMIT file by prepending data in the following form:
[##
One line description: the next line MUST be blank.

Freeform description, commonly in CXT format. Can be any number
of lines, but must be followed by a blank line.

ATTRIBUTE=arbitrary one-line attributes in a block at end.
]##

["The tool requires that all changes to COMMIT are prepended so that conflicts
  on rebasing are impossible, since rebases are always applied to the end of
  the trunk.
]

Flux then automatically adds the following lines to the patch:
[##
AUTHOR=<username>
SIGNATURE=<cryptographic signature of patch>
HASH=<sha256 hash of repo, excluding COMMIT>
]##

["The HASH always dictates the end of a COMMIT record.]

When viewing commits on the command line, pvc will format these messages for
the user.

[{h3}.pvc]
A file containing a newlineline separated list of lua [$+include] and
[$-exclude] Lua patterns to display files the user may have forgotten to
include.

[{h3}Archive]
A branch is "archived" as a single file for transmission or storage by:[+
* moving all patch files to the end of [$tar].
* moving the [$tags] to the end of [$tar].
* copying (or renaming) [$tar] to [$branch.tar]
]

[{h3 n=pvc.collapse}Collapsing Patches]
One advantage over pvc's simplisitic model is that it allows the
maintainer to collapse patches. For example, say you have the
following tags: [##
443 0.1.3
551 0.1.4
]##

Say you no longer need the specific changes that occured between [$[444, 551]]
and just want the diffs between the tagged versions. Flux can create (and
understand) a single [$444-551] patch file which is all the diffs rolled into
one, allowing the maintainer to also cleanup the collapsed COMMITS file (note
that the HASH doesn't include the COMMITS file).

["Note: If a tagged patch is being collapsed it must be the last patch id in a
  collapsed range to prevent loss of tags.
]

When clients of your repo see the collapsed commit, they should perform the
collapse themselves and verify the hash as well as the signature for the new
commit message.

Flux will create a [$branch.<epochSeconds>.443-550.tar.gz] (or other suitable
compression) to [$./pvc/backups] to allow rolling back the change. Backup
files of this kind are also kept when ammending local commits or rebasing to
head.

There are many benefits of this, the main one being it allows for very
fine-grained patches during development with the possibility of future repo
maintence in the future -- one doesn't have to second-guess the best practice
of using small patches during development when they can always be collapsed at
a later date.

[{h2}Common Operations]
Below are common operations and how they are handled by the software.

[{h3}Pull]
The user runs [$pvc pull root]. For this example the latest commit number is "442":[+
* pvc will request a tar file from URL containing the current id to the latest id (442)
* in a temporary directory, pvc will apply each patch sequentially from the
  current [$id.snap] directory.
* pvc will move the temporary directory to [$.pvc/root/442.snap/]
]

[{h3}Checkout]
The user runs [$pvc checkout branch <id>]

If the suitable [$.pvc/branch/id.snap/] directory does not exist then patches
are applied (either forward or backward) to create that directory.

The current directory will then be cleared and replaced with files copied from
the snapshot.

[{h3}Commit]
This is the simplest: a [$diff] is taken against the latest [$snap/] and stored
as the next patch id. Then the latest [$snap/] directory is updated.

[{h3}Branch]
The user runs [$pvc branch name [trunk id]]:[+
* Create a new directory with the branch name under [$.pvc/]
* Copy the full contents of the trunk at the patch id into [$.pvc/branch/id.snap/]
* Create the [$branch] file with the relevant metadata (URL can be a local
  directory).
* That's it. The branch is created. Commits will appear in this directory.
]

[{h3}Merge aka rebase]
The only allowed merge is a rebase. It effectively involves cherry picking
changes from the branch onto the trunk, requiring the user to resolve any
conflicts.

That's it -- and yes cherry picks are slightly complicated, but no this isn't
that hard.

[{h2}Other Considerations]
[+
* On each commit, pvc garbage collects [$id.snap/] directories and moves patch
  files into [$tar].
* A pvc repo can be hosted readonly by simply hosting an FTP server or
  similar. In fact, this is the preferred method of hosting a pvc repo.[+
  * The write path should be behind an RPC or similar to verify the signature/etc.
  * Altenatively, it is (obviously?) trivial to merge patches sent by email.
  ]
]



