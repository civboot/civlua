[$pvc <cmd>]: patch version control command line utility.

["NOTICE: pvc now works but will have bugs and the API is subject to change.
  Use at your own risk and always back up work that you are using pvc
  to track (aka use [<#pvc-git>git and pvc together]).
]

[{:h3 name=pvc-install}Installation]

Simply follow civlua's [<#Installation>] and add the following to your [$.bashrc]
[##
alias pvc="civlua pvc"
]##

[{:h2 name=pvc-about}About]
[*pvc] is a version control system similar to git or mercurial, but is ultra
simple: branches are simply a [$base] followed by a set of unix patches with
incrementing id. The only fundamental disadvantage (or advantage) of using pvc
instead of git is that pvc supports only fast-forward merges, which are the
cleanest and simplest to understand.

Builtin cmds:[+
* [$init dir]: initialize the [$dir] (default=CWD) for PVC.

* [$diff branch1 branch2]: get the difference (aka the patch) between
  [$branch1] (default=[$at]) and [$branch2] (default=local). Each value can be
  either a branch name or a directory which contains a [$.pvcpaths] file.

  ["See [*Usage] for how this can be used for the first commit.]

* [$commit]: add changes to the current branch as a patch and move [$at]
  forward. The commit message can be written to the COMMIT file or be
  specified after the [$--] argument (multiple are space-separated).

* [$at [branch]]: if [$branch] is empty then return the active
  [$branch#id].

  If [$branch] is set then this sets the active [$branch#id], causing the
  local directory to be updated (default id=tip).
  ["git equivalent: [$checkout]]

* [$tip [branch]]: get the highest id for branch (default=current).

* [$branch name [from]]: start a new branch of name [$name]. The optional
  [$from] (default=[$at]) argument can specify a local [$branch#id] or an
  (external) [$path/to/dir] to graft onto the pvc tree.

  ["the [$from/dir] is commonly used by maintainers to accept patches from
    contributors.
  ]

* [$rebase [branch [id]]]: change the base of branch to id.
  (default branch=current, id=branch base's tip)

* [$grow from]: copy the commits at [$from] onto current branch.
  The base of [$from] must be the current branch's tip.
  Then move the branch to backup.
  ["in git this is a "fast forward" merge]

* [$pvc show [branch#id] --num=10 --full]

  If no branch is specified: show branches. [$full] also displays
  the base and tip.

  Else show branch#id and the previous [$num] commit messages.
  With [$full] show the full commit message, else show only
  the first line.

* [$pvc desc branch [$path/to/new]]
  get or set the description for a single branch id.
  The default branch is [$at].

  The new description can be passed via [$path/to/new] or
  after [$--] (like commit).

* [$pvc squash [branch#id endId]]
  squash branch id -> endId (inclusive) into a single patch at [$id].

  You can then edit the description by using [$pvc desc branch#id].

* [$export path/ [branch]]: (warning: untested)
  copy all patch files in the branch directory to
  [$path/]. If an [$#id] is specified then it is used as the maximum id
  (defaults: branch=current, id=tip)

  ["the resulting directory is commonly sent to [$tar -zcvf branch.tar.gz path/]
    and then [$branch.tar.gz] sent to a maintainer to be merged
  ]

* [$prune branch id]: (warning: untested) remove a branch by moving it to a
  backup directory. If an id is given then instead move ids from [$[id,tip]]
  (inclusive) to a backup.
]

[{h2 name=pvc-init}Initiaize your pvc repo]
["You may also want to see [<#pvc-git>] to use git for backups]

First install [<#Package_civ>], then run pvc in bash with [$civ.lua pvc <cmd>].

To track an existing directory:[+
* [$cd path/to/dir] to navigate to the directory
* [$pvc init] to initialize pvc
* [$pvc diff] prints the diff of local changes to stderr and untracked files
  (that are not matched in [$.pvcignore] to stdout. Edit [$.pvcignore]
  with appropriate entries (see [<#pvcignore>]) to ignore paths you don't
  want tracked until [$pvc diff] shows only files you want tracked.

  When ready, running [$pvc diff >> .pvcpaths] in bash will track all untracked
  files.
  ["Alternatively, manually add files to [$.pvcpaths]]
* [$pvc commit -- initial pvc commit] will commit your changes to
  [$.pvc/main/patch/.../1.p].
]

[{:h3}pvcignore]
The [$.pvcignore] file should contain a line-separated list of [<#string.find>]
patterns that should be ignored. Items ending in [$/] will apply to whole
directories. A common pvc ignore file might look like:

[##
# directories
%.git/
%.out/

# extensions
%.so$

# binary files
%./path/to/some_binary
]##

[{h3 name=pvc-git}Use with git]
pvc is still in early development, so there is no hosting service which
ergonomically supports backing-up development. The following is how pvc
(and civlua) itself is developed and seems to work well.

Basically, we are going to have two git repositories. I will use
civlua as the example:[+
* [<https://github.com/civboot/civlua>]: your "main" one that hosts your released
  versions and documentation. This should NOT contain any [$.pvc/] files (but
  should contain i.e.  [$.pvcpaths]).

* [<https://github.com/vitiral/civlua.pvc/commits/main/>]: is literally the git
  repository for your [$.pvc/] directory. While developing we can push
  patches/branches/whatever here.
]

[*First], put [$.pvc/] in your main repo's [$.gitignore]
[##
echo .pvc >> .gitignore
]##

[*Second], follow the [<#pvc-init>] section above. This should include adding
all your files to pvc and making your first pvc commit.

[*Third], [$cd .pvc/] and create your git repository [,inside the .pvc/
directory]. This will literally track your patch files themselves. Use the
following as your [$.pvc/.gitignore]. You may also want to add a [$README.md]
directing folks to your main git repo.
[##
# .pvc/.gitignore
**/*.snap/
backup/
]##

Finally, add the following to your [$.bashrc]
[{## lang=sh}
# Note: you must also have pvc aliased
function pvcp() {
  desc="$(pvc at): $(pvc desc --full)"
  (cd .pvc/ &&
    git add ./ &&
    git commit -am "$desc" &&
    git push origin main)
}
]##

Now you can hack using [$pvc commit] etc and push to your [$repo.pvc] by
simply calling [$pvcp]. Your git commit log will be your current [$at]
location followed by the commit message. When you want to push your
documentation or releases to git, simply do so -- your main commit log
won't be polluted by commiting pvc files.

[{h1}Architecture]

This architecture is given both so users can debug or fix any errors as well as
to make it easier to create other implementations of pvc (i.e. in bash).

pvc is composed of the following components: [+
* [*repo]: the pvc repo (repository) is stored in the [$.pvc/] directory inside of
  a [*project]. It contains directories (which are the branches) and the plaintext file
  [$at] which defines the "current commit" as a [*commit reference] (i.e. [$branch#123]).
  Additionally it contains: [+
  * [$backup/] directory, which contain [$name-<epochsec>/] directories for backups. In
    general, pvc should not delete things but should instead move things to a backup
    directory, reporting these operations to the user (and possibly a log file as well).
  ]

* [*pvcpaths] a list if newline-separated project-relative paths in the file
  [$.pvcpaths].  This is used by pvc to determine which paths are tracked. It's
  contents are tracked as a normal file (it is included in the patch diff).

* [*branch]: a branch is a directory inside the repo (i.e. [$.pvc/main/]). It
  contains the [$patch/] directory (described in [*commit]) and the plain-text files:
  [+
  * [*base]: contains [$branch#123], missing if the branch is the trunk
  * [*tip]: contains an ascii decimal number, representing the last patch id.
  ]

* [*branch (action)]: to "create a branch" means to create a new directory
  inside [$.pvc/] and initialize it with the proper [$base] and [$tip] files. The base
  branch must already exist.

* [*commit (noun)]: refers to a single patch file inside of [$.pvc/branch/patch/.../123.p]. [+
  * The length of [$patch/.../] is stored in [$patch/depth] which is an ascii decimal number,
    always divisible by 2. Each sub-directory has exactly two digits. For instance, a depth
    of 4 would store [$12.p] in [$patch/00/00/12.p] and store [$123456.p] in
    [$12/34/123456.p].
  * [*description]: the top of the patch file (before the first unidiff)
    contains a plain-text description of the commit.
  * [*diffs]: the rest of the patch file contains a series of file differences from the previous patch
    version in the [@unidiff] (aka [$diff -u]) format.
  * [*commit] is often shorthand for the [$commit reference] (i.e. [$branch#123]).
  ]

* [*commit (action)]: "making a commit" means to take the difference of the current directory
  and store it as a patch file in the [$patch/] directory.

* [*snapshot]: a snapshot is the local directory state at a specific commit. It
  is a directory which uses the extension [$.snap/]
  inside of the patch directory, i.e. [$patch/00/123.snap/].

* [*checkout (action)]: to "checkout a commit" means to make the local project
  directory the same as the commit. This is performed by finding the closest
  [*snapshot] and applying commit patches (either forwards or backwards) in
  order to make the snapshot reflect the commits state.

* [*rebase (action)]: to "rebase a branch" means to increase the id of it's [*base],
  typically to it's base-branch's tip. This is accomplished by making a copy of the
  new id's snapshot and repeatedly applying the [$merge] command (or
  equivalent) on each change, using the copied snapshot as [$to] and incrementing
  the [$base] along the change patches. Each new [$patch] file should be stored. [+
  * the software should detect if conflicts are unresolveable and exit, telling the
    user how to fix. The software should be able to resume the rebase once the
    conflicts are resolved.

  * For example, the reference implementation creates a new branch called
    [$branch__rebase] to perform this action. When calling rebase, it first
    checks for this branch and attempts to resume from it.
  ]

* [*merge]: merges a branch onto another one. The branch must already be
  rebased to the tip (also called a "fast forward merge").

* [*squash]: combines multiple commits into one, moving larger commits down. The descriptions
  should be concatenated, and can be edited separately by the user.

* [*export]: simply copies a [*branch] without it's snapshot directories to a
  separate directory, which can be sent to a maintainer to be merged.
]

[{h2}Other Operations]
Other operations, such as showing commit messages or ammending a commit, are
not defined explicitly, but you can see the reference implementation for
details. Typically their implementation is either straightforward or can be
performed by variations of the above operations.

[{! :href=https://en.wikipedia.org/wiki/Diff#Unified_format}unidiff]
[{! :href=https://en.wikipedia.org/wiki/Tar_(computing)}tarball]
