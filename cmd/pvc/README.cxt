[$pvc <cmd>]: patch version control command line utility.

["NOTICE: pvc now works but will have bugs and the API is subject to change.
  Use at your own risk and always back up work that you are using pvc
  to track (aka use git and pvc together).
]

[{:h3 name=pvc-install}Installation]

Simply follow civlua's [@Installation] and then run


pvc is a git or mercurial like (in usage) but extremely simple version control
system where branches are simply a series of unix patches, each containing a
series of [$diff -u] entries. The only fundamental disadvantage (or advantage)
of using pvc instead of git is that pvc supports only fast-forward merges,
which are the cleanest and simplest to understand.

Builtin cmds:[+
* [$init dir]: initialize the [$dir] (default=CWD) for PVC.

* [$diff branch1 branch2]: get the difference (aka the patch) between
  [$branch1] (default=[$at]) and [$branch2] (default=local). Each value can be
  either a branch name or a directory which contains a [$.pvcpaths] file.

  ["See [*Usage] for how this can be used for the first commit.]

* [$commit]: add changes to the current branch as a patch and move [$at]
  forward. The commit message can be written to the COMMIT file or be
  specified after the [$--] argument (multiple are space-separated).

* [$at [branch]]: if [$branch] is empty then return the active
  [$branch#id].

  If [$branch] is set then this sets the active [$branch#id], causing the
  local directory to be updated (default id=tip).
  ["git equivalent: [$checkout]]

* [$tip [branch]]: get the highest id for branch (default=current).

* [$branch name [from]]: start a new branch of name [$name]. The optional
  [$from] (default=[$at]) argument can specify a local [$branch#id] or an
  (external) [$path/to/dir] to graft onto the pvc tree.

  ["the [$from/dir] is commonly used by maintainers to accept patches from
    contributors.
  ]

* [$rebase [branch [id]]]: change the base of branch to id.
  (default branch=current, id=branch base's tip)

* [$grow from]: copy the commits at [$from] onto current branch.
  The base of [$from] must be the current branch's tip.
  Then move the branch to backup.
  ["in git this is a "fast forward" merge]

* [$pvc show [branch#id] --num=10 --full]

  If no branch is specified: show branches. [$full] also displays
  the base and tip.

  Else show branch#id and the previous [$num] commit messages.
  With [$full] show the full commit message, else show only
  the first line.

* [$pvc desc branch [$path/to/new]]
  get or set the description for a single branch id.
  The default branch is [$at].

  The new description can be passed via [$path/to/new] or
  after [$--] (like commit).

* [$pvc squash [branch#id endId]]
  squash branch id -> endId (inclusive) into a single patch at [$id].

  You can then edit the description by using [$pvc desc branch#id].

* [$export path/ [branch]]: (warning: untested)
  copy all patch files in the branch directory to
  [$path/]. If an [$#id] is specified then it is used as the maximum id
  (defaults: branch=current, id=tip)

  ["the resulting directory is commonly sent to [$tar -zcvf branch.tar.gz path/]
    and then [$branch.tar.gz] sent to a maintainer to be merged
  ]

* [$prune branch id]: (warning: untested) remove a branch by moving it to a
  backup directory. If an id is given then instead move ids from [$[id,tip]]
  (inclusive) to a backup.
]

[{h2 name=pvc-init}Initiaize your pvc repo]
["You may also want to see [<#pvc-git>] to use git for backups]

First install [@Package_civ], then run pvc in bash with [$civ.lua pvc <cmd>].

To track an existing directory:[+
* [$cd path/to/dir] to navigate to the directory
* [$pvc init] to initialize pvc
* [$pvc diff] prints the diff of local changes to stderr and untracked files
  (that are not matched in [$.pvcignore] to stdout. Edit [$.pvcignore]
  with appropriate entries (see [@pvcignore]) to ignore paths you don't
  want tracked until [$pvc diff] shows only files you want tracked.

  When ready, running [$pvc diff >> .pvcpaths] in bash will track all untracked
  files.
  ["Alternatively, manually add files to [$.pvcpaths]]
* [$pvc commit -- initial pvc commit] will commit your changes to
  [$.pvc/main/patch/.../1.p].
]

[{:h3}pvcignore]
The [$.pvcignore] file should contain a line-separated list of lua patterns
([@lua.find]) that should be ignored. Items ending in [$/] will apply to
whole directories. A common pvc ignore file might look like:

[##
# directories
%.git/
%.out/

# extensions
%.so$

# specific files
%./path/to/some_file
]##

[{h3 name=pvc-git}Use with git]
pvc is still in early development, so there is no hosting service which
ergonomically supports backing-up development. The following is how pvc
(and civlua) itself is developed and seems to work well.

Basically, we are going to have two git repositories. I will use
civlua as the example:[+
* [<https://github.com/civboot/civlua>]: your "main" one that hosts your released
  versions and documentation. This should NOT contain any [$.pvc/] files (but
  should contain i.e.  [$.pvcpaths]).

* [<https://github.com/vitiral/civlua.pvc/commits/main/>]: is literally the git
  repository for your [$.pvc/] directory. While developing we can push
  patches/branches/whatever here.
]

[*First], put [$.pvc/] in your main repo's [$.gitignore]
[##
echo .pvc >> .gitignore
]##

[*Second], follow the [<#pvc-init>] section above. This should include adding
all your files to pvc and making your first pvc commit.

[*Third], [$cd .pvc/] and create your git repository [,inside the .pvc/
directory]. This will literally track your patch files themselves. Use the
following as your [$.pvc/.gitignore]. You may also want to add a [$README.md]
directing folks to your main git repo.
[##
**/*.snap/
backup/
]##

Finally, add the following to your [$.bashrc]
[{## lang=sh}
# Note: you must also have pvc aliased
function pvcp() {
  desc="$(pvc at): $(pvc desc --full)"
  (cd .pvc/ &&
    git add ./ &&
    git commit -am "$desc" &&
    git push origin main)
}
]##

Now you can hack using [$pvc commit] etc and push to your [$repo.pvc] by
simply calling [$pvcp]. Your git commit log will be your current [$at]
location followed by the commit message. When you want to push your
documentation or releases to git, simply do so -- your main commit log
won't be polluted by commiting pvc files.

[{h2}Basic Architecture]

The below architecture is given to allow a user to debug or fix problems that
occur while using pvc regardless of whether the cause is user, software or
operating system related.

pvc uses only two files in the local directory: [$.pvcpaths] which track
which paths are included and [$COMMIT] which is the default commit message.

All other pvc data is stored in a local [$.pvc/] directory. This contains
branch directories as well as the [$at] file containing the current working
[$branch#id].

The branch directories (i.e. [$.pvc/main/], [$.pvc/dev/]) contain the
following structure: [+
* a [$branch] text file (if this is not the root) which contains the [$name#id] where
  this was branched from.

* an [$uri] text file if this is a remote branch containing where to download
  updates.

* a [$tip] file containing the tip id of the branch.

* a [$patch/] directory with a directory structure nested by two digits
  containing files with extensions ending in either [$.p] (patch file) or
  [$.snap/] (snapshot directory).  For example [$patch/01/23/12345.p] is a
  patch file in a directory structure with [$patch/depth] of [$4].

  ["The [$.snap/] directories contain the complete project at that id.]
]

When pvc commands are run, these directories are modified. For example:[+
* [$at main#123] walks patch files to create a new
  [$.pvc/main/patch/01/123.snap/] directory and updates the local directory to
  match.

* [$commit] creates a new [$patch/01/123.p] file and corresponding
  [$patch/01/123.snap/] directory which is identical to the local directory.
]

[{! :href=https://en.wikipedia.org/wiki/Diff#Unified_format}unidiff]
[{! :href=https://en.wikipedia.org/wiki/Tar_(computing)}tarball]
