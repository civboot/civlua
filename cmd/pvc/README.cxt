[$pvc <cmd>]: patch version control command line utility.

["WARNING: pvc is being implemented and is not yet functional]

A simple version control system where branches are simply a series of unix
patches, each containing a series of [$diff -u] entries for all changed
files in the project directory.

Builtin cmds:[+
* [$init dir]: initialize the [$dir] (default=CWD) for PVC.

* [$tip [branch]]: get the highest id for branch (default=current).

* [$base [branch]]: if [$branch] is empty then return the base
  ([$branch#id] of the current branch (or nothing if branch=root).

  If [$branch] is set then rebase the current branch to make [$branch#id]
  become the base of the branch (default id=tip).

* [$at [branch]]: if [$branch] is empty then return the active
  [$branch#id].

  If [$branch] is set then this sets the active [$branch#id], causing the
  local directory to be updated (default id=tip).
  ["git equivalent: [$checkout]]

* [$diff branch1 branch2]: get the difference (aka the patch) between
  [$branch1] (default=[$at]) and [$branch2] (default=local). Each value can be
  either a branch name or a directory which contains a [$.pvcpaths] file.

* [$commit]: add changes to the current branch as a patch and move [$at]
  forward. The commit message can be written to the COMMIT file or be
  specified after the [$--] argument.

* [$branch name [from]]: start a new branch of name [$name]. The optional
  [$from] (default=[$at]) argument can specify a local [$branch#id] or an
  (external) [$path/to/dir] to graft onto the pvc tree.

  ["the [$from/dir] is commonly used by maintainers to accept patches from
    contributors.
  ]

* [$export path/ [branch]]: copy all patch files in the branch directory to
  [$path/]. If an [$#id] is specified then it is used as the maximum id
  (defaults: branch=current, id=tip)

  ["the resulting directory is commonly sent to [$tar -zcvf branch.tar.gz path/]
    and then [$branch.tar.gz] sent to a maintainer to be merged
  ]
]

[{h2}Basic Architecture]

The below architecture is given to allow a user to debug or fix problems that
occur while using pvc regardless of whether the cause is user, software or
operating system related.

pvc uses only two files in the local directory: [$.pvcpaths] which track
which paths are included and [$COMMIT] which is the default commit message.

All other pvc data is stored in a local [$.pvc/] directory. This contains
branch directories as well as the [$at] file containing the current working
[$branch#id].

The branch directories (i.e. [$.pvc/main/], [$.pvc/dev/]) contain the
following structure: [+
* a [$branch] text file (if this is not the root) which contains the [$name#id] where
  this was branched from.

* an [$uri] text file if this is a remote branch containing where to download
  updates.

* a [$tip] file containing the tip id of the branch.

* a [$patch/] directory with a directory structure nested by two digits
  containing files with extensions ending in either [$.p] (patch file) or
  [$.snap/] (snapshot directory).  For example [$patch/01/23/12345.p] is a
  patch file in a directory structure with [$patch/depth] of [$4].

  ["The [$.snap/] directories contain the complete project at that id.]
]

When pvc commands are run, these directories are modified. For example:[+
* [$at main#123] walks patch files to create a new
  [$.pvc/main/patch/01/123.snap/] directory and updates the local directory to
  match.

* [$commit] creates a new [$patch/01/123.p] file and corresponding
  [$patch/01/123.snap/] directory which is identical to the local directory.
]

[{! :href=https://en.wikipedia.org/wiki/Diff#Unified_format}unidiff]
[{! :href=https://en.wikipedia.org/wiki/Tar_(computing)}tarball]
