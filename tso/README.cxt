[{h1}TSO: tab separated objects]

[" [*WARNING:] TSO is currently incomplete.

   A serializer is implemented. Deserializer coming soon.
]

TSO is a concise and expressive data serialization format. If JSON and CSV had
a baby then their prodigal child would be something like TSO.

Unlike CSV, TSO supports nested records and has an actual spec. Unlike JSON,
TSO is concise and large lists of records (one of the most common kinds of data
that needs to be serialized) can be made very readable.

Features: [+
* Serialize nested arbitrary data
* Human readable and writeable. Favors readability over writeability.
* Supported types: none, boolean, number, string, table (list/map hybrid)
* Design supports (future) fast serialization and deserialization implementation
]

[" Did you know that CSV is both faster to parse and almost as compressed as
   protobufs? [<@compare>I was surprised too].]

[{!:href=https://blog.mbedded.ninja/programming/serialization-formats/a-comparison-of-serialization-formats/}compare]

[!--------------------------------]
[{:h2}Starting Example]
[! Recommendation for text editors: increase your tab size
vim	:set ts=12
]

TSO represents the items in a table as a series of tab separated values.
Similar to CSV, newlines start a new table. The first character specifies
the type, [$.keys] are strings.

[##
-- JSON: [
--   [1, 2, 3],
--   {"name": "John", "birthday": "1999-10-31"}
-- ]

-- TSO:
1	2	3
.name	"John	.birthday	"1999-10-31
]##

[$#] specifies a header which extracts specific keys as indexes in the
tab-separated column.

[##
-- JSON: [
--   {"id": 1, "name": "John",   "birthday": "1999-10-31"},
--   {"id": 2, "name": "Maxine", "birthday": "1998-12-25"}
-- ]

-- TSO
#"id	"name	"birthday
1	"John	1999-10-31
2	"Maxine	1998-12-25
]##

Unlike CSV, TSO supports nested data:

[##
-- JSON: [
--   users = [
--     {"id": 1, "name": "John",   "birthday": "1999-10-31"},
--     {"id", 2, "name": "Maxine", "birthday": "1998-12-25"}
--   ],
--   accounts = [
--     {"userId": 1, "ammount": 1000, "kind": "savings"},
--     {"userId": 1, "ammount": 100,  "kind": "checking"},
--     {"userId": 2, "ammount": 120,  "kind": "checking", "notes": [
--       "2020-01-03: wants investment advice", "2019-11-05: yelled at clerk"
--     ],
--   ],
-- ]

-- TSO
.users	{
 #"name	"birthday
 John	1999-10-31
 Maxine	1998-12-25
}

.accounts	{
 #"userId	"ammount	"kind
 1	1000	"savings
 1	100	"checking
 2	120	"checking	.notes	{
  "2020-01-03: wants investment advice	"2019-11-05: yelled at clerk
 }
}
]##

Other quality of life features will be added as well
[##
-- line comments
"""
Add a "description" as metadata
"""
@name	"my.data.name	-- set the doc name
@ibase	10	-- change the integer base (10 is default)
]##

[{:h2}Types]
The type of an item is determined by the first character after the tab.
Whitespace is ignored. All values except tables end with a tab [$\t] character.
Tables end with a newline (though they can be continued on the next line with
the [$+] character).

[{table}
+ character | description
+ [$n] | none.

  lua [$ds.none], python [$None], C/java/etc [$null]

+ [$t] [$f] | boolean true and false
+ [$$] or [$0-9 a-f A-F] | integer parsed using (base = attr [$ibase])
+ [$^] | floating point parsed using (base = attr [$fbase])
+ [$"] | string (binary data)

  Examples
  [##
  -- 3, "a string", 42
  3, "a string	42	
  
  "a multiline string\t <-- that's a tab.
  'This is on the next line. The next line is empty:
  '	3 -- after the string there is a 3 integer
  ]##

  A tab [$\t] or newline [$\n] end the string. To continue the string
  after a newline use a [$'] as the first non-whitespace character
  following the newline.

  To encode a tab use [$"\t"]. To encode a [$\] character use [$"\\"] or
  simply use [$'\'] followed by
  neither [$'\'] or [$'t'].


+ [${] | nested table until [$}]
+ [$.] | key, the following item is a value

  Only string (binary) keys are supported. If you need other kinds of
  keys then encode whatever type you want in the string

+ [$\n] | row (nested table) delimiter

  Conceptually this ends the current row (non bracketed [${}] table) and
  starts a new row
]

[*A note on Tables]

Tables can contain both indexed values (like a traditional list) as well
as string-keyed values (like a map). This is more similar to a
serialization format like XML which contain both attributes and data.

[" [*Recommendation:] this is the native behavior of Lua tables. In
   python or javascript you would want to key off the list vs index
   depending on the type of the key. In compiled languages, just offer
   different [$get] methods.
]
